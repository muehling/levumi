<% unless @test.required_services&.empty? %>
    <%= content_for :head do %>
        <meta name="viewport" content="width=device-width, initial-scale=1">
    <% end%>
<% end%>
<script>
    //Relevant für Lehrkraft-Ansicht - dort erscheint Name im Testfenster
    document.title = decodeURI(window.location.hash.replace('#',''))
</script>

<div id="error_message" class="alert alert-danger" role="alert" style="font-size: 1.25em; display: none">
  Verbindungsfehler! Ergebnisse konnten nicht gespeichert werden.
</div>


<% @test.required_services&.each do |partial| %>
  <%= render partial: "services/#{partial}" %>
<% end %>

<!-- Test-Styles einbinden -->
<style>
  <% @test.style_files.each do |f| %>
  <%= raw f.download.force_encoding('UTF-8') %>
  <% end %>
</style>
<!-- Hauptseite rendern -->
<% if @assessment.nil? && @student.nil? %>
    <div class="m-4 text-center"><button id="end-preview" class="btn btn-danger">Vorschau beenden</button></div>
<% end %>
<%= raw @test.entry_point.download.force_encoding('UTF-8') %>
<!-- Testskripte laden und Testumgebung definieren -->
<script type="module">
    // all variables and functions declared here that are part of the interface of the tests
    // need to be exposed in the global namespace. Otherwise, not all tests work, depending
    // on implementation.


    <% if @assessment.nil? && @student.nil? %>
        window["$"]('#end-preview').on('click', exit)
    <% end %>

    //Medienpfade für Test bekannt machen (aus ActiveStorage)
    var media_paths = {
        <% @test.media_files.each do |f| %>
        '<%= f.filename %>': '<%= rails_blob_path(f) %>',
        <% end %>
    }
    window.media_paths = media_paths

    //Vorheriges Ergebnis als Objekt
    <% unless @last_result.nil? %>
    const lastResult = {
        views: JSON.parse("<%= escape_javascript(raw @last_result.views.to_json) %>"),
        report: JSON.parse("<%= escape_javascript(raw @last_result.report.to_json) %>"),
        data: JSON.parse("<%= escape_javascript(raw @last_result.data.to_json) %>")
    }
    <% else %>
        const lastResult = undefined
    <% end %>
    window.lastResult = lastResult

    // settings
    let font_family
    let font_size
    let display_timer
    let calculator_layout
    //Präferenzen des Kindes setzen
    <% unless @student.nil? %>
        font_family = '<%= @student.get_setting("font_family") %>'.replace('%20', ' ')
        font_size = <%= @student.get_setting("font_size") %>
        display_timer =  <%= @student.get_setting("display_timer") %>
        calculator_layout =  '<%= @student.get_setting("calculator_layout") %>'
    <% end %>
    window.font_family = font_family
    window.font_size = font_size
    window.displayTimer = display_timer
    window.calculatorLayout = calculator_layout

    <% if !@test[:configuration].nil? %>
        const itemText = '<%= raw @test[:items].to_json %>'
        const configText = '<%= raw @test[:configuration].to_json %>'

        let it = []
        let conf = {}
        try {
            conf = JSON.parse(configText)
        } catch (e) {
            console.error ("Config fehlerhaft", e)
        }

        
        try {            
            it = JSON.parse(itemText)        
        } catch (e) {
            console.error ("Items fehlerhaft", e)
        }
        window.config = window.config || {}
        window.config.items = it
        window.config.startPage = conf.start_page
        window.config.endPage = conf.end_page
        window.config.timeLimit = conf.time_limit
        window.config.dimensions = conf.dimensions
    <% end %>

    function preventNavigation(navEvent) {
        navEvent.preventDefault();
        navEvent.returnValue = '';
    }


    let isLoading = false

    async function sendResult(data, method, callback){
        <% unless @student.nil? && @assessment.nil? %>
        
            const url = '<%= student_results_url(@student)%>'
            const header = {
                'Accept': 'application/json',
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': window["$"]('meta[name="csrf-token"]').attr('content')
            }
            const body = 'assessment_id=<%= @assessment %>&views=' + encodeURIComponent(JSON.stringify(data.views)) + '&report=' + encodeURIComponent(JSON.stringify(data.report)) + '&data=' + encodeURIComponent(JSON.stringify(data.data))
            
            if (isLoading){{
                // prevent multiple posting, in case a student clicks a submit button multiple times
                return
            }}

            isLoading = true
            const response = await fetch(url, {
                method,
                headers: header,
                credentials: 'include',
                body: body
            })
            isLoading = false
            return response
        <% end %>
    }

    //Funktionen für Testumgebung bereitstellen
    async function saveResults(views, report, data, callback) {     
        const d = {views, report, data}               
        const res = await sendResult(d, "POST", callback)
      
        switch (res.status){
            case 200: callback(); break;
            case 422: return; // result has been posted in the previous 10 seconds (some tests might do this)          
            default: 
                window["$"]('#error_message').show()
        }
        window.removeEventListener('beforeunload', preventNavigation, true);
    }
    window.saveResults = saveResults

    //Testfenster schließen
    function exit() {       
        window.removeEventListener('beforeunload', preventNavigation, true);
        <% if @assessment.nil? && @student.nil? %>
            window.close()
        <% else %>
            window.location.href = '<%= @redirect %>'
        <% end %>
    }
    window.exit = exit

    //Hilfsfunktionen

    //Zeitmessen
    var stopwatch = null

    function startTimer() {
        stopwatch = new Date()
    }
    window.startTimer = startTimer

    function stopTimer() {
        return (new Date() - stopwatch)
    }
    window.stopTimer = stopTimer

    //zufälliges Umsortieren
    const shuffleArray = (array)=> {
       let j = undefined
        for (let i = array.length - 1; i > 0; --i) {
            j = Math.floor(Math.random() * (i + 1)); //Hier nötig, da ansonsten [ in der nächsten Zeile als Array-Zugriff interpretiert wird...
            [array[i], array[j]] = [array[j], array[i]]
        }
    }
    window.shuffleArray = shuffleArray


    //Test-Skripte einbinden
    <% @test.script_files.each do |f| %>
    <%= raw f.download.force_encoding('UTF-8') %>
    <% end %>

    //FIXME these functions are declared in various test.js files, and referenced in click handlers in the corresponding test.html files
    //FIXME ideally, the click handlers should be attached with $('el').on('click', someFunction) in the test.js.
    //FIXME once this is done, these assignments need to be removed.
    //FIXME try/catch is necessary to suppress errors for tests that don't implement the functions

    // auslautverhaertung_n4
    try { window.next = next } catch(e) { }
    try { window.fill_gap = fill_gap } catch(e) { }
    try { window.dk_function = dk_function } catch(e) { }
    try { window.start = start } catch(e) { }
    try { window.save_answer = save_answer } catch(e) { }
    try { window.start_example = start_example } catch(e) { }


    //Anzeigen des Feedbacks
    //Erhält zum einen, wie das Ergebnis aufgefasst wird (-1(schlechter), 0(gleich/erstes mal), 1(besser))
    function showFeedback(result, timedout) {
        window["$"]('#testspace').html(
            "<div style='text-align: center'>" +
            "<img id='pic' style='width: 300px'/>" +
            "<p style=\"font-family: 'serif'; font-size:1.5em; margin-top: 10%\" id='feedback_text' class='text-center'></p>" +
            "</div>"
        )
        if (result == 0) {

            window["$"]('#pic').attr('src', '<%= asset_path '/images/shared/Levumi-normal.jpg' %>')
        } else if (result == 1) {
            window["$"]('#pic').attr('src', '<%= asset_path '/images/shared/Levumi-jubelt.gif' %>')
        } else {
            window["$"]('#pic').attr('src', '<%= asset_path '/images/shared/Levumi-liest.gif' %>')
        } if (timedout) {
            window["$"]('#feedback_text').html('Zeit abgelaufen.<br/>Die Testergebnisse wurden gespeichert!<br/>Sie können das Testfenster' +
                ' nun schließen.<br/><br/><button class="btn btn-warning btn-lg exit-button">Fenster schließen!</button>')
                .css('margin-top','0%')
        } else {
            window["$"]('#feedback_text').html('Alle Items beantwortet.<br/>Die Testergebnisse wurden gespeichert!<br/>Sie können' +
                ' das Testfenster nun schließen.<br/><br/><button class="btn btn-warning btn-lg exit-button">Fenster schließen!</button>')
                .css('margin-top','0%')
        }

        window["$"](".exit-button").on("click", exit)
    }
    window.showFeedback = showFeedback

    <%if @test.student_test%>
      window.addEventListener('beforeunload', preventNavigation, true)
      document.title = "<%= @test.level %>"
    <%end%>
</script>